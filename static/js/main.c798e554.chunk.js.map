{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["UpperBox","props","react_default","a","createElement","className","style","onClick","click","id","letter","LowerBox","option","Hint","hint","Tutorial","color","fontWeight","Taunt","taunt","App","state","tutorial","currentWord","showHint","nextBoxToFill","emptyBoxes","answer","done","interactive","progress","words","word","newWord","str","_this","split","map","i","setState","alphabets","randomNum","Math","round","random","nextWord","alert","clickHandler","e","target","textContent","getAttribute","text","nextTarget","length","emptiedBoxes","console","log","push","splice","latestEmptied","lastFilledBox","document","getElementById","_this2","this","join","setTimeout","_this3","mystyle","mytauntstyle","transitionDuration","background","borderBottom","borderRight","width","fontSize","opacity","marginLeft","App_Tutorial","App_Taunt","l","App_UpperBox","key","App_Hint","concat","sort","App_LowerBox","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,SAAW,SAACC,GACd,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,MAASL,EAAMK,MAAQC,QAAWN,EAAMO,MAAOC,GAAIR,EAAMQ,IACrFR,EAAMS,UAITC,EAAW,SAACV,GACd,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWE,QAAWN,EAAMO,MAAOC,GAAMR,EAAMQ,IAChER,EAAMW,SAITC,EAAO,SAACZ,GACV,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,UAAKH,EAAMa,MACXZ,EAAAC,EAAAC,cAAA,UAAQG,QAAWN,EAAMO,OAAzB,eAINO,EAAW,SAACd,GAGd,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACfH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,+CACAF,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAME,MAPD,CAACU,MAAO,UAAWC,WAAY,SAOpC,SAAH,UAA2Cf,EAAAC,EAAAC,cAAA,0BAC3CF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAME,MAPH,CAACU,MAAM,UAAWC,WAAY,SAOjC,OAAH,UAAsCf,EAAAC,EAAAC,cAAA,yBACtCF,EAAAC,EAAAC,cAAA,UAAQG,QAASN,EAAMO,OAAvB,WAKFU,EAAQ,SAACjB,GACX,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,MAASL,EAAMK,OACzCJ,EAAAC,EAAAC,cAAA,cAASH,EAAMkB,SAmORC,6MA7NXC,MAAQ,CACJC,SAAU,EACVC,YAAc,SACdT,KAAM,wBACNU,UAAU,EACVC,cAAe,EACfC,WAAa,GACbC,OAAQ,GACRC,KAAM,GACNC,aAAa,EACbC,SAAU,EACVX,MAAO,GACPY,MAAO,CACH,CAACC,KAAM,OAAQlB,KAAM,yBACrB,CAACkB,KAAM,QAASlB,KAAM,wBACtB,CAACkB,KAAM,QAASlB,KAAM,2BACtB,CAACkB,KAAM,YAAalB,KAAM,yBAC1B,CAACkB,KAAM,SAAUlB,KAAM,0BACvB,CAACkB,KAAM,OAAQlB,KAAM,kCAKjCmB,QAAU,SAACC,GACP,GAAW,UAARA,EAAgB,CAChB,IAEKP,EADcQ,EAAKd,MAAME,YACJa,MAAM,IAAIC,IAAI,SAAAC,GAAC,MAAE,MAC1CH,EAAKI,SAAS,CACVC,UAJY,CAAC,IAAI,IAAK,KAKtBb,OAAQA,SAGX,GAAY,SAARO,EAAe,CACpB,IACIO,EAAYC,KAAKC,MAAoB,EAAdD,KAAKE,UAC5Bd,EAAWK,EAAKd,MAAMS,SACtBe,EAAWV,EAAKd,MAAMU,MAAMD,EAAW,GAAGE,KAC1CL,EAASkB,EAAST,MAAM,IAAIC,IAAI,SAAAC,GAAC,MAAE,MACvCH,EAAKI,SAAS,CACdhB,YAAcsB,EACd/B,KAAMqB,EAAKd,MAAMU,MAAMD,EAAW,GAAGhB,KACrCU,UAAU,EACVC,cAAe,EACfC,WAAa,GACbC,OAAQA,EACRa,UAZgB,CAAC,CAAC,IAAI,IAAK,KAAM,CAAC,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,MAY1EC,GACrBb,KAAM,GACNT,MAAO,GACPU,aAAa,SAKbiB,MAAM,4CAIdC,aAAe,SAACC,GAOZ,GAA6B,SAAzBA,EAAEC,OAAOC,YACTf,EAAKI,SAAS,CACVjB,SAAU,EACVO,aAAa,SAIhB,GAA6B,cAAzBmB,EAAEC,OAAOC,YACdf,EAAKI,SAAS,CACVf,UAAWW,EAAKd,MAAMG,gBAIzB,GAAuC,aAAnCwB,EAAEC,OAAOE,aAAa,SAAwB,CAEnD,IAAIC,EAAOJ,EAAEC,OAAOC,YAChBG,EAAalB,EAAKd,MAAMI,cACxBC,EAAaS,EAAKd,MAAME,YAAY+B,OACpCC,EAAepB,EAAKd,MAAMK,WAC1BC,EAASQ,EAAKd,MAAMM,OACxB6B,QAAQC,MAELJ,EAAa3B,GAAuB,MAAT0B,GAC1BG,EAAaG,KAAKV,EAAEC,OAAOxC,IAC3BkB,EAAOgC,OAAON,EAAY,EAAGD,GAC7BJ,EAAEC,OAAOC,YAAc,IACvBf,EAAKI,SAAS,CACVd,cAAgB4B,EAAa,EAC7BO,cAAgBL,EAChB5B,OAAQA,EACRR,MAAO,MAIXgB,EAAKI,SAAS,CACVpB,MAAO,6BAMd,GAAuC,aAAnC6B,EAAEC,OAAOE,aAAa,SAAwB,CAEnD,IAAIC,EAAOJ,EAAEC,OAAOC,YAChBG,EAAalB,EAAKd,MAAMI,cACxBC,EAAaS,EAAKd,MAAME,YAAY+B,OACpCO,EAAgBC,SAASC,eAAgBV,EAAa,EAAI,aAC1DE,EAAepB,EAAKd,MAAMK,WAC1BC,EAASQ,EAAKd,MAAMM,OAEZ,MAATyB,GAAgBJ,EAAEC,SAAWY,GAAyD,OAAxCnC,EAAW6B,EAAaD,OAAS,IAC9EQ,SAASC,eAAeR,EAAaA,EAAaD,OAAS,IAAIJ,YAAcE,EAE7EG,EAAaI,OAAOJ,EAAaD,OAAS,EAAG,GAC7C3B,EAAOgC,OAAON,EAAa,EAAG,EAAG,KAEjClB,EAAKI,SAAS,CACVd,cAAe4B,EAAa,EAC5B3B,WAAY6B,EACZ5B,OAAQA,EACRR,MAAO,MAKXgB,EAAKI,SAAS,CACVpB,MAAO,qGAMH,IAAA6C,EAAAC,KACZtC,EAASsC,KAAK5C,MAAMM,OACS,MAA9BA,EAAOA,EAAO2B,OAAS,IAAkC,KAApBW,KAAK5C,MAAMO,OAC/BqC,KAAK5C,MAAMM,OAAOuC,KAAK,MACzBD,KAAK5C,MAAME,aAErB0C,KAAK1B,SAAS,CACVX,KAAM,UACNT,MAAO,WACPU,aAAa,EACbC,SAAUmC,KAAK5C,MAAMS,SAAW,IAEpCqC,WAAW,kBAAMH,EAAK/B,QAAQ,SAAS,QAGvCgC,KAAK1B,SAAS,CACVX,KAAM,QACNT,MAAO,UAGXgD,WAAW,kBAAKH,EAAKzB,SAAS,CAACX,KAAM,MAAM,oDAOnDqC,KAAKhC,QAAQ,SACbuB,QAAQC,IAAI,8CAGJ,IAAAW,EAAAH,KACAI,EAAU,KACVC,EAAe,KACfzC,EAAcoC,KAAK5C,MAAMQ,YACzBW,EAAYyB,KAAK5C,MAAMmB,UACvBrB,EAAQ8C,KAAK5C,MAAMF,MA6BvB,MANuB,KAApB8C,KAAK5C,MAAMO,OACqByC,EAAX,YAApBJ,KAAK5C,MAAMO,KAdI,CACf2C,mBAAoB,KACpBC,WAAY,UACZC,aAAc,kBACdC,YAAY,mBAEC,CACbH,mBAAoB,KACpBC,WAAY,UACZC,aAAc,kBACdC,YAAY,oBAMH,KAAVvD,IACAmD,EAzBc,CACbC,mBAAoB,KACpBI,MAAO,QACPC,SAAU,QACVC,QAAS,GACTC,WAAY,QAsBT5E,EAAAC,EAAAC,cAAA,OAAKK,GAAG,OACNP,EAAAC,EAAAC,cAAA,uBACwB,IAAxB6D,KAAK5C,MAAMC,UAAkBpB,EAAAC,EAAAC,cAAC2E,EAAD,CAAUvE,MAAOyD,KAAKlB,eACpD7C,EAAAC,EAAAC,cAAC4E,EAAD,CAAO7D,MAAS8C,KAAK5C,MAAMF,MAAOb,MAASgE,IAC3CpE,EAAAC,EAAAC,cAAA,OAAKC,UAAY,cACZ4D,KAAK5C,MAAMM,OAAOU,IAAI,SAAC4C,EAAG3C,GAAJ,OAAUpC,EAAAC,EAAAC,cAAC8E,EAAD,CAAUxE,OAAUuE,EAAGzE,MAAS4D,EAAKrB,aAAcoC,IAAO7C,EAAI,YAAa7B,GAAM6B,EAAI,YAAahC,MAAQ+D,OAE/InE,EAAAC,EAAAC,cAAA,OAAKC,UAAY,iBACbH,EAAAC,EAAAC,cAACgF,EAAD,CACItE,KAAQmD,KAAK5C,MAAMG,SAAUyC,KAAK5C,MAAMP,KAAM,KAC9CN,MAASyD,KAAKlB,gBAEtB7C,EAAAC,EAAAC,cAAA,OAAKC,UAAY,cACXwB,GAAeoC,KAAK5C,MAAME,YAAYa,MAAM,IAAIiD,OAAO7C,GAAW8C,OAAOjD,IAAK,SAAC3B,EAAQ4B,GAAT,OAAepC,EAAAC,EAAAC,cAACmF,EAAD,CAAU3E,OAAUF,EAAQF,MAAS4D,EAAKrB,aAAcoC,IAAK7C,EAAI,YAAa7B,GAAMC,EAAS4B,eAzN9LkD,aC/BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7F,EAAAC,EAAAC,cAAC4F,EAAD,MAASlC,SAASC,eAAe,SD2H3C,kBAAmBkC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c798e554.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst UpperBox = (props) => {\n    return <div className=\"upperBox\" style = {props.style}  onClick = {props.click} id={props.id} >\n        {props.letter}\n        </div>\n}\n\nconst LowerBox = (props) => {\n    return <div className=\"lowerBox\" onClick = {props.click} id = {props.id} >\n        {props.option}\n        </div>\n}\n\nconst Hint = (props) => {\n    return <div className=\"hint\">\n            <h4>{props.hint}</h4>\n            <button onClick = {props.click} >Show Hint</button>\n        </div>\n}\n\nconst Tutorial = (props) => {\n    let green = {color: \"#28a745\", fontWeight: \"bold\" }\n    let red = {color:\"#dc3545\", fontWeight: \"bold\"}\n    return <div className=\"tutorial\">\n        <div className=\"innertutorial\">\n        <h2>How To Play</h2>\n        <p>Read the hint then guess the word!</p>\n        <p>To delete letters, start from right!</p>\n        <p><span style= {green}>GREEN</span> means <strong>correct</strong></p>\n        <p><span style={red}>RED</span> means <strong> wrong</strong></p>\n        <button onClick={props.click}>Okay</button>\n        </div>\n        </div>\n}\n\nconst Taunt = (props) => {\n    return <div className=\"taunt\" style = {props.style}>\n        <strong>{props.taunt}</strong>\n        </div>\n}\n\nclass App extends Component {\n    \n    state = {\n        tutorial: 1,\n        currentWord : \"revive\",\n        hint: \"the opposit of [kill]\",\n        showHint: false,\n        nextBoxToFill: 0,\n        emptyBoxes : [],\n        answer: [],\n        done: \"\",\n        interactive: false,\n        progress: 0,\n        taunt: \"\",\n        words: [\n            {word: \"take\", hint: \"the opposit of [give]\"},\n            {word: \"happy\", hint: \"the opposit of [sad]\"},\n            {word: \"brave\", hint: \"the opposit of [coward]\"},\n            {word: \"dangerous\", hint: \"the opposit of [safe]\"},\n            {word: \"friend\", hint: \"the opposit of [enemy]\"},\n            {word: \"ugly\", hint: \"the opposit of [beautiful]\"}\n        ]\n        \n    }\n    \nnewWord = (str) => {\n    if(str === \"start\"){\n       let alphabets = [[\"a\",\"y\", \"c\"], [\"i\", \"e\", \"f\"], [\"j\", \"h\", \"z\"], [\"t\", \"o\", \"u\"], [\"w\", \"m\", \"k\"]]\n        let currentWord = this.state.currentWord\n        let answer = currentWord.split(\"\").map(i=>\"-\")\n        this.setState({\n            alphabets: alphabets[0],\n            answer: answer\n        })\n       }\n    else if (str === \"next\"){\n        let alphabets = [[\"a\",\"y\", \"c\"], [\"i\", \"e\", \"f\"], [\"j\", \"h\", \"z\"], [\"t\", \"o\", \"u\"], [\"w\", \"m\", \"k\"]]\n        let randomNum = Math.round(Math.random()*5)\n        let progress = this.state.progress\n        let nextWord = this.state.words[progress - 1].word\n        let answer = nextWord.split(\"\").map(i=>\"-\")\n        this.setState({\n        currentWord : nextWord,\n        hint: this.state.words[progress - 1].hint,\n        showHint: false,\n        nextBoxToFill: 0,\n        emptyBoxes : [],\n        answer: answer,\n        alphabets: alphabets[randomNum],\n        done: \"\",\n        taunt: \"\",\n        interactive: true,\n            })\n    }\n    \n    else {\n        alert(\"congrats! You have finished the game.\")\n    }\n}\n\nclickHandler = (e) => {\n    \n//    console.log(\"clicked\");\n//        console.log(e.target.getAttribute(\"id\"));\n//    console.log(e.target.getAttribute(\"class\"))\n    \n    //this turns off the tutorial\n    if (e.target.textContent === \"Okay\"){\n        this.setState({\n            tutorial: 0,\n            interactive: true\n        })\n    }\n// this toggles the \"hints\"\n    else if (e.target.textContent === \"Show Hint\"){\n        this.setState({\n            showHint: !this.state.showHint\n        })\n    }\n//this fills the upper boxes and empties the lower ones at the same time when the latter are pressed!\n    else if (e.target.getAttribute(\"class\") === \"lowerBox\"){\n        \n        let text = e.target.textContent;\n        let nextTarget = this.state.nextBoxToFill;\n        let emptyBoxes = this.state.currentWord.length;\n        let emptiedBoxes = this.state.emptyBoxes\n        let answer = this.state.answer\n        console.log()\n        \n        if(nextTarget < emptyBoxes && text !== \"-\"){\n            emptiedBoxes.push(e.target.id)\n            answer.splice(nextTarget, 1, text)\n            e.target.textContent = \"-\"\n            this.setState({\n                nextBoxToFill : nextTarget + 1,\n                latestEmptied : emptiedBoxes,\n                answer: answer,\n                taunt: \"\"\n                \n            })}\n        else {\n            this.setState({\n                taunt: \"What the hell, man!\"\n            })\n        }\n    }\n    \n// this umpties the upper boxes & fills the lower ones when the former are pressed\n    else if (e.target.getAttribute(\"class\") === \"upperBox\"){\n        \n        let text = e.target.textContent;\n        let nextTarget = this.state.nextBoxToFill;\n        let emptyBoxes = this.state.currentWord.length;\n        let lastFilledBox = document.getElementById((nextTarget - 1 )+\"-UpperBox\")\n        let emptiedBoxes = this.state.emptyBoxes\n        let answer = this.state.answer\n        \n        if(text !== \"-\" && e.target === lastFilledBox && emptyBoxes[emptiedBoxes.length - 1] !== null) {\n            document.getElementById(emptiedBoxes[emptiedBoxes.length - 1]).textContent = text;\n//            console.log(\"this is the text \" + text)\n            emptiedBoxes.splice(emptiedBoxes.length - 1, 1)\n            answer.splice(nextTarget - 1, 1, \"-\")\n//            console.log(\"this is the array \" + emptiedBoxes)\n            this.setState({\n                nextBoxToFill: nextTarget - 1,\n                emptyBoxes: emptiedBoxes,\n                answer: answer,\n                taunt: \"\"\n                \n            })\n        }\n        else {\n            this.setState({\n                taunt: \"Dude? WTF!\"\n            })\n        }\n    }\n}\n\ncomponentDidUpdate(){\n    let answer = this.state.answer\n    if(answer[answer.length - 1] !== \"-\" && this.state.done === \"\"){\n        let answerStr = this.state.answer.join(\"\");\n        let theWord = this.state.currentWord;\n        if(answerStr === theWord){\n            this.setState({\n                done: \"correct\",\n                taunt: \"Good Job\",\n                interactive: false,\n                progress: this.state.progress + 1\n            })\n            setTimeout(() => this.newWord(\"next\"), 1500);\n        }\n        else {\n            this.setState({\n                done: \"wrong\",\n                taunt: \"Wrong\"\n            })\n            \n            setTimeout(()=> this.setState({done: \"\"}), 1000)\n            \n        }\n    }\n}\n\ncomponentWillMount(){\n    this.newWord(\"start\");\n    console.log(\"runs once\")\n}\n\n    render(){\n        let mystyle = null;\n        let mytauntstyle = null;\n        let interactive = this.state.interactive\n        let alphabets = this.state.alphabets\n        let taunt = this.state.taunt\n        \n        let tauntStyle = {\n            transitionDuration: \"1s\",\n            width: \"200px\",\n            fontSize: \"0.9em\",\n            opacity: 0.9,\n            marginLeft: \"30%\"\n            \n        }\n        let correctstyle = {\n            transitionDuration: \"1s\",\n            background: \"#28a745\",\n            borderBottom: \"1px solid white\",\n            borderRight:\"1px solid white\"\n        }\n        let wrongstyle = {\n            transitionDuration: \"1s\",\n            background: \"#dc3545\",\n            borderBottom: \"1px solid white\",\n            borderRight:\"1px solid white\"\n        }\n        \n        if(this.state.done !== \"\"){\n            this.state.done === \"correct\"? mystyle = correctstyle: mystyle = wrongstyle;\n        }\n        if(taunt !== \"\"){\n           mytauntstyle = tauntStyle;\n           }\n        return <div id=\"App\">\n                 <h1>Word Game</h1>\n                {this.state.tutorial === 1 && <Tutorial click={this.clickHandler}/>}\n                <Taunt taunt = {this.state.taunt} style = {mytauntstyle}/>\n                <div className = \"container1\">\n                    {this.state.answer.map((l, i) => <UpperBox letter = {l} click = {this.clickHandler} key = {i + \"-UpperBox\"} id = {i + \"-UpperBox\"} style ={mystyle} />)}\n                    </div>\n                <div className = \"hintcontainer\">\n                    <Hint\n                        hint = {this.state.showHint? this.state.hint: null}\n                        click = {this.clickHandler} />\n                    </div>\n                <div className = \"container2\">\n                     {interactive && this.state.currentWord.split(\"\").concat(alphabets).sort().map( (letter, i) => <LowerBox option = {letter} click = {this.clickHandler} key={i + \"-LowerBox\"} id = {letter + i} />)}\n                    </div>\n                </div>\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}